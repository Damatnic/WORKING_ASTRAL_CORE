apiVersion: apps/v1
kind: Deployment
metadata:
  name: astralcore-app
  namespace: production
  labels:
    app: astralcore
    environment: production
    version: v5
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: astralcore
      environment: production
  template:
    metadata:
      labels:
        app: astralcore
        environment: production
        version: v5
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account
      serviceAccountName: astralcore-sa
      
      # Node Selector for dedicated nodes
      nodeSelector:
        workload: production
        
      # Topology spread for high availability
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: astralcore
            
      # Anti-affinity for pod distribution
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - astralcore
            topologyKey: kubernetes.io/hostname
            
      containers:
      - name: astralcore
        image: astralcore/v5:latest
        imagePullPolicy: Always
        
        # Security Context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
            
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
          
        # Environment Variables from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: astralcore-config
        - secretRef:
            name: astralcore-secrets
            
        # Individual Environment Variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: astralcore-db-secret
              key: connection-string
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: astralcore-redis-secret
              key: connection-string
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: astralcore-auth-secret
              key: nextauth-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: astralcore-encryption-secret
              key: encryption-key
              
        # Resource Limits and Requests
        resources:
          limits:
            cpu: "2"
            memory: "2Gi"
            ephemeral-storage: "1Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
            ephemeral-storage: "500Mi"
            
        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: liveness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          
        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: readiness
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          
        # Startup Probe for slow starts
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
          
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.next/cache
        - name: logs
          mountPath: /var/log/astralcore
          
      # Init Container for database migration
      initContainers:
      - name: migrate
        image: astralcore/v5:latest
        command: ["npx", "prisma", "migrate", "deploy"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: astralcore-db-secret
              key: connection-string
              
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 500Mi
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
          
      # Image Pull Secrets
      imagePullSecrets:
      - name: dockerhub-secret
      
      # DNS Policy
      dnsPolicy: ClusterFirst
      
      # Restart Policy
      restartPolicy: Always
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 30
      
---
apiVersion: v1
kind: Service
metadata:
  name: astralcore-service
  namespace: production
  labels:
    app: astralcore
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: astralcore
    environment: production
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
      
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: astralcore-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: astralcore-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 4
        periodSeconds: 30
      selectPolicy: Max
      
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: astralcore-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: astralcore
      environment: production